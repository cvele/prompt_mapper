name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  pr-info:
    name: PR Information
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: PR Information
        run: |
          echo "üîç Pull Request Information"
          echo "================================"
          echo "Title: ${{ github.event.pull_request.title }}"
          echo "Author: ${{ github.event.pull_request.user.login }}"
          echo "Base: ${{ github.event.pull_request.base.ref }}"
          echo "Head: ${{ github.event.pull_request.head.ref }}"
          echo "Files changed: $(git diff --name-only ${{ github.event.pull_request.base.sha }}...${{ github.event.pull_request.head.sha }} | wc -l)"
          echo ""
          echo "üìÅ Changed files:"
          git diff --name-only ${{ github.event.pull_request.base.sha }}...${{ github.event.pull_request.head.sha }}

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install development dependencies
        run: make install-dev

      - name: Run linting checks
        run: make lint

      - name: Run type checking
        run: make type-check

      - name: Check code formatting
        run: make format && git diff --exit-code

  unit-tests:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    if: github.event.pull_request.draft == false
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies (Unix)
        if: runner.os != 'Windows'
        run: make install-dev

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          python -m venv .venv
          .venv\Scripts\activate
          pip install --upgrade pip setuptools wheel
          pip install -e ".[dev]"
          pip install -r requirements-dev.txt

      - name: Run unit tests (Unix)
        if: runner.os != 'Windows'
        run: make test-unit

      - name: Run unit tests (Windows)
        if: runner.os == 'Windows'
        run: |
          .venv\Scripts\activate
          pytest tests/unit -v

      - name: Upload coverage
        if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
        run: make test-cov
        continue-on-error: true

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: make install-dev

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start test environment
        run: make docker-up

      - name: Wait for Radarr
        run: |
          echo "‚è≥ Waiting for Radarr to be ready..."
          timeout 120 bash -c 'until curl -f http://localhost:7878/ping; do sleep 3; done'

      - name: Set up Radarr configuration
        run: ./scripts/setup_radarr.sh
        env:
          RADARR_API_KEY: test-integration-key

      - name: Create test data
        run: make test-movies

      - name: Run integration tests
        run: make test-integration
        env:
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          RADARR_API_KEY: test-integration-key

      - name: Test CLI functionality
        run: |
          source .venv/bin/activate
          export TMDB_API_KEY="${{ secrets.TMDB_API_KEY }}"
          export OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
          export RADARR_API_KEY="test-integration-key"

          # Test CLI commands
          prompt-mapper --help
          prompt-mapper --config config/config.yaml status
          prompt-mapper --config config/config.yaml validate

      - name: Clean up
        if: always()
        run: make docker-down

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: make install-dev

      - name: Test build process
        run: make build

      - name: Verify distribution
        run: make dist

      - name: Test installation from wheel
        run: |
          source .venv/bin/activate
          pip install dist/*.whl
          prompt-mapper --help

  security-and-deps:
    name: Security & Dependencies
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: make install-dev

      - name: Check for security vulnerabilities
        run: |
          source .venv/bin/activate
          pip install safety
          safety check --json --output safety-report.json || true
          if [ -f safety-report.json ]; then
            echo "üîí Security scan completed"
            cat safety-report.json
          fi

      - name: Check dependency licenses
        run: |
          source .venv/bin/activate
          pip install pip-licenses
          pip-licenses --format=json --output-file=licenses.json
          echo "üìÑ Dependency licenses:"
          cat licenses.json

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            safety-report.json
            licenses.json
          retention-days: 30
