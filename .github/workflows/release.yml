name: Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual triggering
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  actions: read

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: make install-dev

      - name: Run all quality checks
        run: make check

      - name: Run unit tests
        run: make test-unit

      - name: Validate configuration
        run: |
          source .venv/bin/activate
          python -m prompt_mapper.cli init --output /tmp/test_config.yaml
          python -c "
          from pathlib import Path
          from prompt_mapper.config import ConfigManager
          cm = ConfigManager(Path('/tmp/test_config.yaml'))
          try:
              cm.load_config()
              print('✅ Configuration validation passed')
          except Exception as e:
              print(f'❌ Configuration validation failed: {e}')
              exit(1)
          "

  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    needs: validate-release
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: make install-dev

      - name: Run tests
        run: make test-unit

      - name: Test CLI installation
        run: make run

  build-distribution:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: make install-dev

      - name: Build distribution packages
        run: make build

      - name: Verify distribution
        run: make dist

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: distribution-packages
          path: dist/
          retention-days: 7

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-distribution
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: distribution-packages
          path: dist/

      - name: Extract release notes
        id: extract-notes
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Extract release notes from CHANGELOG if it exists
          if [ -f CHANGELOG.md ]; then
            # Extract notes for this version
            sed -n "/^## \[$VERSION\]/,/^## \[/p" CHANGELOG.md | head -n -1 > release_notes.md
          else
            echo "Release $VERSION" > release_notes.md
            echo "" >> release_notes.md
            echo "Automated release from tag $VERSION" >> release_notes.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release v${{ steps.extract-notes.outputs.version }}
          body_path: release_notes.md
          files: |
            dist/*.whl
            dist/*.tar.gz
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          token: ${{ secrets.GITHUB_TOKEN }}

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Extract version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Release notification
        run: |
          echo "🎉 Release v${{ steps.version.outputs.version }} created successfully!"
          echo "📦 Distribution packages available in GitHub release"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.version }}"
